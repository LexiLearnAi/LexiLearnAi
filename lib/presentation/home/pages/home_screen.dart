import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:lexilearnai/common/helpers/format_date.dart';
import 'package:lexilearnai/presentation/home/bloc/home_screen_bloc.dart';
import 'package:lexilearnai/presentation/home/widgets/calendar/custom_calender.dart';

@RoutePage()
class HomeScreen extends StatelessWidget {
  const HomeScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return BlocProvider(
      create: (context) => HomeScreenBloc(),
      child: BlocBuilder<HomeScreenBloc, HomeScreenState>(
        builder: (context, state) {
          return SafeArea(
            child: Scaffold(
              body: _buildBody(context, state),
            ),
          );
        },
      ),
    );
  }

  Widget _buildBody(BuildContext context, HomeScreenState state) {
    //final size = MediaQuery.of(context).size;
    return CustomScrollView(
      slivers: [
        SliverToBoxAdapter(child: _customCalendarWithContainer(state, context)),
        SliverToBoxAdapter(
          child: Padding(
            padding: const EdgeInsets.all(20.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  state.selectedDay.getDayString(),
                  style: const TextStyle(
                    fontSize: 32,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const SizedBox(height: 2),
                Text(
                  state.selectedDay.getDateString(),
                  style: const TextStyle(
                    fontSize: 16,
                    color: Colors.grey,
                  ),
                ),
              ],
            ),
          ),
        ),
        SliverToBoxAdapter(
          child: Padding(
            padding: const EdgeInsets.all(20.0),
            child: Column(
              children: [
                _buildCard(
                  'Your Cards',
                  'Cards created by AI with words selected by you, specially for today.',
                  const Icon(Icons.style, color: Color(0xFFFF6B6B), size: 32),
                ),
                const SizedBox(height: 16),
                _buildCard(
                  'Daily Cards',
                  'Daily cards generated by AI just for you.',
                  const Icon(Icons.calendar_today,
                      color: Color(0xFF5B4DBC), size: 32),
                ),
              ],
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildCard(String title, String subtitle, Icon icon) {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        border: Border.all(
          color: Colors.grey.withValues(alpha: .7),
          width: 1,
        ),
      ),
      child: Row(
        children: [
          icon,
          const SizedBox(width: 16),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  title,
                  style: const TextStyle(
                    fontSize: 18,
                    fontWeight: FontWeight.w600,
                  ),
                ),
                const SizedBox(height: 4),
                Text(
                  subtitle,
                  style: TextStyle(
                    fontSize: 14,
                    color: Colors.grey[600],
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _customCalendarWithContainer(
      HomeScreenState state, BuildContext context) {
    return Container(
      margin: const EdgeInsets.symmetric(horizontal: 20, vertical: 10),
      child: CustomCalendar(
        firstDay: DateTime.now(),
        lastDay: DateTime.now().add(const Duration(days: 365)),
        focusedDay: state.selectedDay,
        onDaySelected: (selectedDay, focusedDay) {
          context
              .read<HomeScreenBloc>()
              .add(HomeScreenDaySelected(selectedDay));
        },
      ),
    );
  }
}
